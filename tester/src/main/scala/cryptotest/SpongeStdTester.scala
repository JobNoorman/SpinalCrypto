package cryptotest

import spinal.core._
import spinal.sim._
import spinal.core.sim._
import org.scalatest.FunSuite
import spinal.crypto.BigIntToHexString
import spinal.crypto.construtor.{SpongeIO_Std, Sponge_Std}
import spinal.crypto.primitive.keccak.KeccakF_Std
import spinal.lib._



class SpongeStdTester extends FunSuite {

  class KeccakSponge() extends Component {

    val io =  slave(SpongeIO_Std(576, 512))

    val sponge = new Sponge_Std(1024, 576, 512)
    val func   = new KeccakF_Std(1600)

    sponge.io.func <> func.io
    sponge.io.sponge <> io
  }


  test("Sponge_Keccak_1600_512"){

    SimConfig.withWave(4).withConfig(SpinalConfig(inlineRom = true)).compile(new KeccakSponge()).doSim{ dut =>

      dut.clockDomain.forkStimulus(2)

      // pattern
      val pIn = List(
        List(
          //BigInt("D30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080", 16)
          //BigInt("D30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080", 16),
          BigInt("00000000000000d300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000", 16)

        )
      )


      val pOut = List(
        BigInt("F1258F7940E1DDE784D5CCF933C0478AD598261EA65AA9EEBD1547306F80494D8B284E056253D057FF97A42D7F8E6FD490FEE5A0A44647C48C5BDA0CD6192E76AD30A6F71B19059C30935AB7D08FFC64EB5AA93F2317D635A9A6E6260D71210381A57C16DBCF555F43B831CD0347C82601F22F1A11A5569F05E5635A21D9AE6164BEFEF28CC970F2613670957BC46611B87C5A554FD00ECB8C3EE88A1CCF32C8940C7922AE3A26141841F924A2C509E416F53526E70465C275F644E97F30A13BEAF1FF7B5CECA249", 16),
        BigInt("55EABB80767D364686C354C8D01CBACE9452D254B0979B3DDE59422BE2C66F16C660E4F2D4D8212E78414F691B639BB3CBB20F9F1B22E381CF16DA5FAC2DA63F83C0B76552D95F7C44EFC84EAF017E1548D380FF3E532C9592436EC5C5E02F05BDE57CA1EE8DE7E9240970468A1FD1B012A978439CBB7686D26B59FCCEFF8B4DD2AA0F472110FFF87BD44ABF53F72551E15AD2B722D00BB7C56095932C792C459E02D1766AD3A79C312F2DA72ADA4EC368B9F274A8D7D6B92B7239F7E51EEA1EB6947F6894D77AEB", 16),
        BigInt("C9F309FF271C66319281C8B3825841B42219CB1928CA14C4F50D1D2AE140281AF0A33A68985B6934D8A79767500429F6BE55A8FFF0767FAFBC2A9530CCA9D7A87E7947DEBC81B851772429B40AA052A858F891E79CE863653110152CADF8860F7F6F0628BDA22D08A89FB4DB4293CC0A390BCA6688AB09BEFADCBB8BBBEDCE4B2D78A388460C4A73E692F192C06EA9AE909DE0D99F0083F076773FCDC7E9D261344D00AE9D02C8539D85CB92EF2A61550A1A8ECF6537E0B3A6DA3FB1F1688E95CFE9307B7DB8BED0", 16),
        BigInt("96FD5DCE98F24747BC17F718A5EE2C326C35A669C2803013B609BCA1CB4290D79ACB9589DFE9E24D23CD87D2100A09C81D045BFEC0E027B456C35E5CA9BBA89FFE57C5CEA57A60C2E7EE16B2641E669B68985ABFA550BB66F6923F628221835B6FFA61F3003DA12AEC8239484A92E877C0B246BCCD3FC38578C896C5470D48A7861A0C89AD6C9AC44721476CB83EA905C0B5307B7F640E2C1F273DC75696478A22D54D8F7705A150BD92ECCC819E4ABE58137F2452C9686A0F61A7F4CA21445709683D0401018460", 16),
        BigInt("D1AED9E3149CF176FA5784FB1CD05D62410AD4C334AC5843FD5D711A3619C022EF3C5A52A19521C388CA427AD4093D4030CAE0756CCB675DF1BC6D1003600450551E54846019C2740F0E2C4EED72C02E7FA05C108E09CA188A77C0D124F5E5B35BFCB30FC8DE496DEADC837994534B200B81F95E44D6BB58DAD404401A489506D60AB885FE20EBF52EB0F3A94432ABCF0186261253FAA874691B683FD0CEB84A26DE0E2E35F2AD7A5F559030137AD5FEB372861AA4A3C6AF1AA9D09D3BA9A957FA7EAA90728CA360", 16)
      )

      var index = 0
      var indexBlock = 0

      // send differnt pattern
      while(index != pIn.length){

        // initialize value
        dut.io.init       #= true
        dut.io.cmd.last   #= false
        dut.io.cmd.valid  #= false
        dut.io.cmd.n.randomize()

        dut.clockDomain.waitActiveEdge()

        dut.io.init #= false

        // Send all block in the sponge
        while(indexBlock != pIn(index).length){

          dut.clockDomain.waitActiveEdge()

          dut.io.cmd.last  #= (indexBlock == pIn(index).length - 1)
          dut.io.cmd.valid #= true
          dut.io.cmd.n     #= pIn(index)(indexBlock)

          dut.clockDomain.waitActiveEdgeWhere(dut.io.rsp.valid.toBoolean)
          dut.io.cmd.valid #= false

          val rtlState_out = BigInt(dut.io.rsp.z.toBigInt.toByteArray.takeRight(dut.io.rsp.z.getWidth / 8))
          println(s"${BigIntToHexString(rtlState_out)}")
          //val rtlState_out = BigInt(dut.io.rsp.string.toBigInt.toByteArray.takeRight(dut.io.rsp.string.getWidth / 8))
          //val refState_out = BigInt(pOut(index).toByteArray.takeRight(dut.io.rsp.string.getWidth / 8))

          //assert(rtlState_out == refState_out , s"Wrong result RTL ${BigIntToHexString(rtlState_out)} !=  REF ${BigIntToHexString(refState_out)}")

          indexBlock += 1
        }

        dut.clockDomain.waitActiveEdge(5)

        index += 1
      }
    }
  }
}


